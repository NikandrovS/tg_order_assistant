const axios = require('axios');
const { Telegraf, session, Scenes: { BaseScene, WizardScene, Stage }, Markup } = require('telegraf');

const menu_keyboard = Markup.keyboard(['üì¶ –ó–∞–∫–∞–∑', '‚Äçüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏']);
const company_keyboard = Markup.inlineKeyboard([
    Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å', 'edit'),
    Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å', 'add')
]);
const new_company_keyboard = Markup.inlineKeyboard([
    Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å', 'add')
]);
const delete_keyboard = (id) => Markup.inlineKeyboard([
    Markup.button.callback('–£–¥–∞–ª–∏—Ç—å', 'delete:' + id)
]);
const count_keyboard = Markup.inlineKeyboard([
    Markup.button.callback('-', 'decrease'),
    Markup.button.callback('ok', 'done'),
    Markup.button.callback('+', 'increase')
]);
const company_confirm_keyboard = Markup.inlineKeyboard([
    Markup.button.callback('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip'),
    Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue')
]);
const cancel_keyboard = Markup.inlineKeyboard([
    Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')
]);

const items_keyboard = Markup.keyboard([['–ö–æ–ª–±–∞—Å–∞', '–°—ã—Ä', '–•–ª–µ–±'], ['–í–µ—Ç—á–∏–Ω–∞', '–ú–æ–ª–æ–∫–æ', '–ö–µ—Ñ–∏—Ä', '–ú—É–∫–∞'], ['–ú–∞–∫–∞—Ä–æ–Ω—ã', '–ö—É—Ä–∏—Ü–∞', '–í–æ–¥–∞']]);

const exit_keyboard = Markup.keyboard(['–û—Ç–º–µ–Ω–∞']);
const remove_keyboard = Markup.removeKeyboard();

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
const orderScene = new BaseScene('orderScene');
orderScene.enter(async ctx => {
    if (!ctx.session.companyList.length) {
        return ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞', exit_keyboard);
    }
    ctx.reply('–í—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', exit_keyboard);
    return ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ${ ctx.session.companyList[0].company }. –ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`, company_confirm_keyboard);
});
orderScene.action('continue', async ctx => {
    ctx.deleteMessage();
    ctx.session.store = ctx.session.companyList[0].company;
    await ctx.reply(`–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: ${ ctx.session.store }.`);
    setTimeout(() => {
        ctx.reply(`–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ${ ctx.session.store }?`, items_keyboard);
    }, 500);
    return ctx.scene.enter('itemScene', { store: ctx.session.store }, true);
});
orderScene.action('skip', ctx => {
    ctx.deleteMessage();
    ctx.session.companyList.shift();
    return ctx.scene.enter('orderScene');
});
orderScene.on('text', ctx => {
    ctx.session.store = ctx.message.text;
    ctx.reply(`–í—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω: ${ ctx.message.text }.`);
    setTimeout(() => {
        ctx.reply(`–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω ${ ctx.message.text }?`, items_keyboard);
    }, 500);
    return ctx.scene.enter('itemScene', { store: ctx.message.text }, true);
});
orderScene.leave();

const itemScene = new BaseScene('itemScene');
// itemScene.enter(ctx => ctx.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', exit_keyboard));
itemScene.on('text', async ctx => {
    ctx.session.product = ctx.message.text;
    ctx.session.user = ctx.message.from.id;
    await ctx.reply(`–í –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç ${ ctx.message.text }?`, exit_keyboard);
    return ctx.scene.enter('countScene', { store: ctx.message.text });
});
itemScene.leave();

const countScene = new BaseScene('countScene');
countScene.enter(ctx => {
    ctx.session.weight = 0;
    return ctx.reply(`–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö: ${ ctx.session.weight } –∫–≥.`, count_keyboard);
});
countScene.action('decrease', ctx => {
    if (!ctx.session.weight) return;
    ctx.session.weight -= 0.5;
    ctx.editMessageText(`–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö: ${ ctx.session.weight } –∫–≥.`, count_keyboard);
});
countScene.action('increase', ctx => {
    ctx.session.weight += 0.5;
    ctx.editMessageText(`–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö: ${ ctx.session.weight } –∫–≥.`, count_keyboard);
});
countScene.action('done', ctx => {
    if (!ctx.session.weight) {
        return ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–µ—Å!');
    } else {
        return ctx.scene.leave();
    }
});

countScene.leave(async (ctx) => {
    const data = {
        user: ctx.session.user,
        store: ctx.session.store,
        product: ctx.session.product,
        count: ctx.session.weight
    };
    for (const value of Object.values(data)) {
        if (!value) return;
    }
    try {
        const res = await axios.post(process.env.BACKEND_HOST + '/api', data);
        await ctx.reply(`–í–∞—à –∑–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω ${ ctx.session.store } –æ—Ñ–æ—Ä–º–ª–µ–Ω.`);

        if (res.status === 200) {
            // setTimeout(() => {
            await ctx.reply(`–í –∑–∞–∫–∞–∑–µ: ${ ctx.session.product }, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${ ctx.session.weight }–∫–≥.`, menu_keyboard);
            // }, 500);
        }
    } catch (err) {
        console.log(err.message || err);
        ctx.reply(`–ó–∞–∫–∞–∑ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.`, menu_keyboard);
    }
    if (ctx.session.companyList.length > 1) {
        ctx.session.companyList.shift();
        setTimeout(() => {
            return ctx.scene.enter('orderScene');
        }, 1500);
    } else {
        return ctx.reply('–°–ø–∞—Å–∏–±–æ!');
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
const newCompanyScene = new BaseScene('newCompanyScene');
newCompanyScene.enter(ctx => ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', cancel_keyboard));
newCompanyScene.on('text', async ctx => {
    const res = await axios.post(process.env.BACKEND_HOST + '/api/company', {
        user: ctx.update.message.from.id,
        company: ctx.message.text
    });
    if (res.status === 200) {
        ctx.reply(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: "${ ctx.message.text }"`, menu_keyboard);
        return ctx.scene.leave();
    }
    return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.', menu_keyboard);
});
newCompanyScene.action('cancel', ctx => {
    ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ', menu_keyboard);
    return ctx.scene.leave();
});
newCompanyScene.leave();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const settingScene = new BaseScene('settingScene');
settingScene.enter(async ctx => {
    const res = await axios.get(process.env.BACKEND_HOST + '/api/company/' + ctx.update.message.from.id);
    ctx.session.company = res.data;
    await ctx.reply(`–í–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${ res.data.length } ${ textHelper(res.data.length) }`, exit_keyboard);
    if (!res.data.length) {
        return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', new_company_keyboard);
    } else {
        return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', company_keyboard);
    }
});
settingScene.action('edit', ctx => {
    ctx.session.company.forEach(record => {
        ctx.reply(record.company, delete_keyboard(record._id));
    });
});
settingScene.action('add', ctx => {
    ctx.deleteMessage();
    ctx.scene.leave();
    return ctx.scene.enter('newCompanyScene');
});
settingScene.action(/^delete:.*/, async ctx => {
    const id = ctx.callbackQuery.data.split(':')[1];
    const res = await axios.delete(process.env.BACKEND_HOST + '/api/company/' + id);
    if (res.status === 200) {
        ctx.reply('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', menu_keyboard);
    } else {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', menu_keyboard);
    }
    return ctx.scene.leave();
});

const stage = new Stage([orderScene, itemScene, countScene, settingScene, newCompanyScene]);
stage.hears('–û—Ç–º–µ–Ω–∞', async ctx => {
    await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ', menu_keyboard);
    return ctx.scene.leave();
});

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.use(session(), stage.middleware());
bot.command('/start', ctx => ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', menu_keyboard));

bot.hears('üì¶ –ó–∞–∫–∞–∑', async ctx => {
    const res = await axios.get(process.env.BACKEND_HOST + '/api/company/' + ctx.update.message.from.id);
    ctx.session.companyList = res.data;
    return ctx.scene.enter('orderScene', exit_keyboard);
});
bot.hears('‚Äçüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏', ctx => ctx.scene.enter('settingScene'));
bot.launch();

function textHelper(count) {
    switch (count) {
        case 1:
            return '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è';
        case 2:
            return '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
        case 3:
            return '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
        case 4:
            return '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏';
        default:
            return '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π';
    }
}
