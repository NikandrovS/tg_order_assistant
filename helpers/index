const { google } = require("googleapis");
const productCells = require('../config/productCells.config');

const helpers = {};

helpers.measuringType = (name) => (name.match(/\(шт\)/gm) ? "шт." : "кг.");

helpers.returnMeasuringType = (name) => (name.match(/\(шт\)/gm) ? "шт." : "г.");

helpers.arrayValuesToNumber = (array) =>
  array.map((value) => parseFloat(value.replace(",", ".")));

helpers.keyboardNameGenerator = (product, available) => (available ? (product.shortName || product.name) : '❌ ' + (product.shortName || product.name))

helpers.getProductList = async function () {
  const auth = new google.auth.GoogleAuth({
    keyFile: "keys.json",
    scopes: "https://www.googleapis.com/auth/spreadsheets",
  });

  const authClientObject = await auth.getClient();
  const googleSheetsInstance = google.sheets({ version: "v4", auth: authClientObject });
  const spreadsheetId = process.env.GOOGLE_ORDER_SHEET;

  const readData = await googleSheetsInstance.spreadsheets.values.get({
    auth, //auth object
    spreadsheetId, // spreadsheet id
    range: "Склад" + process.env.PRODUCT_LIST_CELLS, //range of cells to read from.
  });

  if (readData.data.values) {
    const stockRemains = await this.getStockBalance();
    const [products, package] = readData.data.values;
    return products.reduce((acc, value, idx) => [
        ...acc,
        {
          name: value.trim(),
          shortName: getProductShortName(value.trim()),
          package: +package[idx],
          stockRemains: stockRemains[idx],
        },
      ], []);
  } 
  return false;
};

helpers.getStockBalance = async function (string = "total") {
  const range = string === "total" ? process.env.TOTAL_STOCK_REMAINS_CELLS : process.env.TOTAL_STOCK_ORDERED_CELLS;
  const auth = new google.auth.GoogleAuth({
    keyFile: "keys.json",
    scopes: "https://www.googleapis.com/auth/spreadsheets",
  });

  const authClientObject = await auth.getClient();
  const googleSheetsInstance = google.sheets({
    version: "v4",
    auth: authClientObject,
  });
  const spreadsheetId = process.env.GOOGLE_ORDER_SHEET;

  const readData = await googleSheetsInstance.spreadsheets.values.get({
    auth,
    spreadsheetId,
    range: "Склад" + range,
  });

  if (readData.data.values) {
    const [values] = readData.data.values
    return this.arrayValuesToNumber(values);
  }
};

helpers.setStockBalance = async function (array) {
  const auth = new google.auth.GoogleAuth({
    keyFile: "keys.json",
    scopes: "https://www.googleapis.com/auth/spreadsheets",
  });

  const authClientObject = await auth.getClient();
  const googleSheetsInstance = google.sheets({
    version: "v4",
    auth: authClientObject,
  });
  const spreadsheetId = process.env.GOOGLE_ORDER_SHEET;

  let renderArray = [array];
  await googleSheetsInstance.spreadsheets.values.update({
    auth,
    spreadsheetId,
    range: "Склад" + process.env.TOTAL_STOCK_ORDERED_CELLS,
    valueInputOption: "USER_ENTERED",
    resource: {
      values: renderArray,
    },
  });
};

helpers.countFormatter = (num) => (num === 1 ? 'товара' : 'товаров');

getProductShortName = (name) => productCells.find(product => product.name === name).shortName;

module.exports = helpers;
